/////////////////////////////////////////////////////////
//                                                     //
//               Master Hack Installer                 //
//                                                     //
/////////////////////////////////////////////////////////

#include "Extensions/Hack Installation.txt"

////////////////////////////////FIXES & CHANGES

//keep the game from clearing the end of ram for no reason
PUSH
ORG $0227E8; SHORT 0xB570 0x4E0D 0x4C01 0x4D02 0xE007 0; WORD (0x203F000-0x20159D0) 0x20159D0; ORG $022818; SHORT 0x600E 0xBC70
ORG $04CA00; SHORT 0xB570 0x4E0D 0x4C01 0x4D02 0xE007 0; WORD (0x203F000-0x201F550) 0x201F550; ORG $04CA30; SHORT 0x600E 0xBC70
ORG $13C064; SHORT 0xB570 0x4E0D 0x4C01 0x4D02 0xE007 0; WORD (0x203F000-0x200F3C4) 0x200F3C4; ORG $13C094; SHORT 0x600E 0xBC70
POP

PUSH; ORG $A54B2; SHORT 0x46C0; POP //do not erase exorcised units

#ifdef skipIntroCutscene
	PUSH; ORG $13D3BE; SHORT 0xE04F; ORG $13D470; SHORT 0x46C0; POP
#endif

//makes all units player controlled
#ifdef DEBUG_unitControl
	PUSH; ORG $92542; SHORT 0xD122; POP //control npc
	PUSH; ORG $92578; SHORT 0xD107; POP //control enemy
	//PUSH; ORG $92584; SHORT 0xE001; POP //control judge
#endif

//fixes a bug in vanilla: the game tries to keep item effects from stacking, however it only manages to do so for the first 16 effects
#define fixItemEffectStacking
#ifdef fixItemEffectStacking
	//#define itemEffectStackAlways
	#ifdef itemEffectStackAlways
		PUSH; ORG $12FB34; SHORT 0x46C0; POP //make item effects always stack
	#else
		PUSH; ORG $12FAFC; SHORT 0xB408 0x46C0; jumpToHack(itemNoStackStart); POP //allocate stack for item effect tracking
		PUSH; ORG $12FB32; SHORT 0xB408; jumpToHack(itemNoStackCheck); POP //make item effects never stack
		PUSH; ORG $12FC66; SHORT 0x46C0; jumpToHack(itemNoStackEnd); POP //exit properly
		
		ALIGN 4
		itemNoStackStart:
		#incbin "ASM/itemNoStackStart.dmp"
		
		ALIGN 4
		itemNoStackCheck:
		#incbin "ASM/itemNoStackCheck.dmp"
		
		ALIGN 4
		itemNoStackEnd:
		#incbin "ASM/itemNoStackEnd.dmp"
	#endif
#endif

PUSH; ORG $12D334; SHORT 0xE001; POP //make beneficial status effects always hit (unless immune to status flag is set)

//modify healing opcode (used at the end of any mission) to also restore elemental resistances
PUSH; ORG $12386C; jumpToHack(extendedHealOpcode); POP
ALIGN 4
extendedHealOpcode:
#incbin "ASM/extendedHealOpcode.dmp"

//remove link related options, as they break easily and don't really add anything to a romhack
PUSH; ORG $43E3C; SHORT 0x46C0 0x2000; POP //hide link option
PUSH; ORG $50C40; SHORT 0x2504; POP //hide support clan, this is 100% needed as the space freed is used by other things

//increase display for move and jump in unit stats and shop; also evade in shop and inventory
PUSH; ORG $7580E; SHORT 0x2205; ORG $75820; SHORT 0x2202; ORG $7584A; SHORT 0x2205; POP //increase digits of move and jump in unit stats, and shift them to the left
PUSH; ORG $6F3F8; SHORT 0x2202; ORG $6F42C; SHORT 0x2202; ORG $6F460; SHORT 0x2203; POP //increase digits of move, jump and evade in store
PUSH; ORG $6F3D8; SHORT 0x20A0; ORG $6F404; SHORT 0x20A0; ORG $6F438; SHORT 0x20B0; POP //shift the new store numbers to the left
PUSH; ORG $8792E; SHORT 0x2403; POP //increase display for move/jump/evade in inventory (they all use the same number)
PUSH //move stuff around in the inventory so it matches the shop
ORG $8791E; SHORT 0x2212; ORG $8794C; SHORT 0x2213
ORG $94F978; SHORT 0xF001 0xF002 0xF003 0xF004 0
ORG $94F9B0; SHORT 0xF005 0xF006 0xF007 0xF008 0
ORG $94F9E8; SHORT 0xF00D 0xF00E 0xF00F 0xF010 0
POP

//set the character portraits to use for main character and clan name entry screens
//this option is only recommended if using quickStart or custom events
#ifdef quickStart
	#define mcNameScreenCharacter 0x02 //default for quickStart: normal Marche (0x02)
	#define clanNameScreenCharacter 0x08 //default for quickStart: Montblanc (0x08)
#else
	#define mcNameScreenCharacter 0x0F //vanilla: Winter Marche (0x0F)
	#define clanNameScreenCharacter 0x08 //vanilla: Montblanc (0x08)
#endif
PUSH; ORG $12A12C; BYTE mcNameScreenCharacter; POP
PUSH; ORG $52D080; BYTE mcNameScreenCharacter; POP
PUSH; ORG $12A144; BYTE clanNameScreenCharacter; POP

#ifdef quickStart
PUSH; ORG $43E28; SHORT 0x46C0 0x2001; POP //start with clan option
PUSH; ORG $97A0; jumpToHack(quickStartFlags); POP //set some flags so the game works properly
PUSH; ORG $9A5E4C; WORD quickStartEvent-0x9A5E4C; POP //change the events
PUSH; ORG $99CC; SHORT 0x2103; POP //fix laws
PUSH; ORG $52CFC0; BYTE mcNameScreenCharacter; POP
PUSH; ORG $52CFF0; BYTE clanNameScreenCharacter; POP
//change enemies to load in snowball fight
ALIGN 4
quickStartFlags:
#incbin "ASM/quickStartFlags.dmp"
quickStartEvent:
BYTE 0x53 0x01 0x00
BYTE 0x0C 0x00
BYTE 0x48 0x01
BYTE 0x4E
BYTE 0x20 mcNameScreenCharacter 0x53 0x00 0x01
BYTE 0x20 clanNameScreenCharacter 0x54 0x00 0x01
BYTE 0x4B /*->*/ 0x16 /*<- song id*/
BYTE 0x4D 0x64 0x01 0x00 0x01
BYTE 0x47 0x98 0x00 0x00 0x00 0x01 0x00
BYTE 0x06 0x13 0x3C 0x64
BYTE 0x18 0x0A
BYTE 0x18 0x0B
BYTE 0x06 0x31 0x3C 0x00
BYTE 0x17 0x05
#endif

#ifdef customPub
PUSH; ORG $5D23C; SHORT 0x46C0 0xB408; jumpToHack(customPubOptions); POP
ALIGN 4
customPubOptions:
#incbin "ASM/customPubOptions.dmp"
POIN pubOptions
ALIGN 4
pubOptions:
BYTE 0x00 firstPubOption
BYTE 0x01 secondPubOption
BYTE 0x02 thirdPubOption
BYTE 0x03 fourthPubOption
#endif

PUSH; ORG $41E; SHORT 0xD104 0xDF02 0xE7F9; POP //replace busy loop with Halt syscall by endrift

PUSH; ORG $51BA50; BYTE 2; POP //change default color mode to TV

#ifdef noMovementUndoing
PUSH; ORG $93EAE; SHORT 0x2000; POP  //make it impossible to undo movements, might improve it in the future by letting the player undo movements if nothing happened (no healing ability etc), I guess it can be a status bit or similar?? that equals unable to undo movement
PUSH; ORG $925AA; SHORT 0x2001 0x46C0; POP  //make it so units always need to confirm their movement (choose a facing direction), even if it isn't the end of their turn
PUSH; ORG $95664; SHORT 0x46C0 0x46C0; ORG $9566C; SHORT 0x46C0 0x46C0; POP //makes wait (and confirmation) not set some flags we need intact, which are going to be unset anyway on the same frame
PUSH; ORG $95650; jumpToHack(checkIfWait1); POP //here we check if the turn should end or not, also set flags only when we want to
PUSH; ORG $9300C; jumpToHack(checkIfWait2); POP //this checks if it was a confirmation or not thanks to the check before
PUSH; ORG $925B4; jumpToHack(checkIfWait3); POP //turn only ends if both movement and action have been made, also sets a flag to solve a portrait bug
PUSH; ORG $9560C; jumpToHack(checkIfWait4); POP //check for the portrait flag so the portrait animation happens if it was confirmation
PUSH; ORG $968CE; SHORT 0x46C0; jumpToHack(checkIfWait5); POP //set movement to 0xFF when we need to confirm
PUSH; ORG $9633E; SHORT 0x46C0; jumpToHack(checkIfWait6); POP //unset the previous thing if we cancel out
ALIGN 4
checkIfWait1:
#incbin "ASM/checkifwait1.dmp"
ALIGN 4
checkIfWait2:
#incbin "ASM/checkifwait2.dmp"
ALIGN 4
checkIfWait3:
#incbin "ASM/checkifwait3.dmp"
ALIGN 4
checkIfWait4:
#incbin "ASM/checkifwait4.dmp"
ALIGN 4
checkIfWait5:
#incbin "ASM/checkifwait5.dmp"
ALIGN 4
checkIfWait6:
#incbin "ASM/checkifwait6.dmp"
#endif

#ifdef noJudges
PUSH; ORG $CED86; SHORT 0x2000; ORG $BC7BE; SHORT 0x2000; ORG $BAC5A; SHORT 0x2000; POP //default judges = none for all maps
PUSH; ORG $27C50; jumpToHack(noLawFlee); POP //allow retreat on maps that originally had judges

PUSH; ORG $757AE; SHORT 0x46C0 0x46C0; ORG $757CC; SHORT 0x46C0 0x46C0; POP //don't draw yellow or red card ammount on status menu
PUSH; ORG $7548A; SHORT 0x46C0 0x46C0; ORG $754A4; SHORT 0x46C0 0x46C0; ORG $754BE; SHORT 0x46C0 0x46C0; ORG $754D8; SHORT 0x46C0 0x46C0; POP //and don't draw the cards

PUSH; ORG $3287E; SHORT 0xE008; POP //remove overworld Law button functionality
PUSH; ORG $31408; jumpToHack(noLawGraphicsOverworld); POP //remove overworld Law button graphics
PUSH; ORG $1343C8; SHORT 0x2000 0x4770; POP //make laws not work
PUSH; ORG $27BDA; SHORT 0x2100; POP //law/law cards option never works

ALIGN 4
noLawFlee:
#incbin "ASM/noLawFlee.dmp"

ALIGN 4
noLawGraphicsOverworld:
#incbin "ASM/noLawGraphicsOverworld.dmp"
#endif

//allow shoes to be stolen with steal: accessory
#ifdef stealShoes
PUSH; ORG $12D540; SHORT 0x2203; POP //3 types of items to steal
PUSH; ORG $12D548; POIN StealAccessoryList; POP
ALIGN 4
StealAccessoryList:
SHORT 0x1D 0x1C 0x1B
PUSH; ORG $133038
#incbin "ASM/stealshoes.dmp"
POP
#endif

#ifdef installMorphingMorphersMorph
	#include "morphingMorphersMorph.event" //makes morphers change aspect after morphing
#endif

#include "jobAndRaceCustomization.event" //many changes to how jobs, races and ability mastering work

#ifdef installJPLearn
	#include "jpLearn.event" //removes all original functionality of jp and makes it be used to purchase abilities instead
#endif

#include "newAbilities.event" //installs a loop that modifies job base stats and other things, allowing for some new abilities and morphing morphers

#include "manualSorting.event" //allows for units to be swapped around for custom party orders

#ifdef newLevelUp
	#include "newLevelUp.event" //makes units always spawn with the same stats
#endif

#ifdef morePointDigits
	#include "bigHP.event"
#endif

#ifdef installFFTDeath
	#include "Ironman/FFT Death.event"
#endif

#ifdef installIronman
	#include "Ironman/Ironman.event"
#endif

#ifdef customNames
	#include "customNames/installer.event"
#endif

////////////////////////////////TEXT CHANGES

ALIGN 4
PUSH; ORG $13EA2; SHORT 0xB408; jumpToHack(customTextLoop); POP //makes the game read pointers instead of shorts
customTextLoop:
#incbin "ASM\customTextLoop.dmp"
POIN CustomTextTableFunctions
CustomTextTableFunctions:
POIN customHelpTextBankLoader
POIN 0 //terminator

#include "customHelpTextBank.event" //makes it possible to add new help text ids

#include "customOthers.event" //repoint the others table to allow for more ability command, menu options, etc entries

////////////////////////////////GRAPHIC CHANGES

PUSH; ORG $588C; jumpToHack(uncompressedLength); POP //correctly load the size of uncompressed images
ALIGN 4
uncompressedLength:
#incbin "ASM\uncompressedlength.dmp"

PUSH; ORG $5448; jumpToHack(uncompressedLoader); POP //make the game able to load uncompressed portraits and other stuff
ALIGN 4
uncompressedLoader:
#incbin "ASM\uncompressedloader.dmp"

#ifdef install1bitAbilities
	#include "newJPPointers.event"
	ALIGN 4
	JPIconShop:
	#incext png2dmp "Images\JPIconShop.png"

	ALIGN 4
	newJP:
	SHORT 0xFFFF 792
	#incext png2dmp "Images/jpreward1.png"
#endif

#ifdef installMovementAbilities
	#include "newMenuPointers.event"
	PUSH; ORG $6EAB4; POIN 0x83B4214; POP
	#ifdef install1bitAbilities
		ALIGN 4
		newMenu:
		SHORT 0xFFFF 1600
		#incext png2dmp "Images\menumove1.png"
	#else
		ALIGN 4
		newMenu:
		SHORT 0xFFFF 1600
		#incext png2dmp "Images\menumove3.png"
	#endif

	ALIGN 4
	movementButton:
	BYTE 0xFF
	#incext png2dmp "Images\movementButton1.png"
	BYTE 0xFF
	#incext png2dmp "Images\movementButton2.png"
	BYTE 0xFF
	#incext png2dmp "Images\movementButton3.png"

	ALIGN 4
	movementButtonShop:
	#incext png2dmp "Images\movementButton4.png"
#else
	#ifdef install1bitAbilities
		#include "newMenuPointers.event"
		PUSH; ORG $6EAB4; POIN 0x83B4214; POP
	
		ALIGN 4
		newMenu:
		SHORT 0xFFFF 1600
		#incext png2dmp "Images\menumove2.png"
	#endif
#endif


PUSH; ORG $6E96C; jumpToHack(movementButtonShopLoad); POP //load the movement button for the shop

ALIGN 4
movementButtonShopLoad:
#incbin "ASM\movementbuttonshopload.dmp"
#ifdef installMovementAbilities
	POIN movementButtonShop
#else
	WORD 0
#endif
#ifdef install1bitAbilities
	POIN JPIconShop
#else
	WORD 0
#endif

PUSH; ORG $539E; SHORT 0xB408; jumpToHack(loadAbilityButtons); POP //load whatever palette we want for portraits
ALIGN 4
loadAbilityButtons:
#incbin "ASM/loadAbilityButtons.dmp"
WORD 0
POIN AbilityButtons //a pointer to a table that has the location of the little button things that show on the side in the learnt abilities tab
AbilityButtons:
POIN $3C575C //action
POIN $3C589F //reaction
POIN $3C59E2 //support
#ifdef installMovementAbilities
	POIN movementButton //$3C5B25 //combo
#else
	POIN $3C5B25 //combo
#endif

#include "negativeNumbers.event"

#include "newInventory/installer.event"

ALIGN 4
draw4digits:
#incbin "ASM/draw4digits.dmp"
