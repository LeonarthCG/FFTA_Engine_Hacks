// before and after this list everything is kanji, feel free to replace them

// numbers
#define _0 "BYTE 0x80 0xA6;"
#define _1 "BYTE 0x80 0xA7;"
#define _2 "BYTE 0x80 0xA8;"
#define _3 "BYTE 0x80 0xA9;"
#define _4 "BYTE 0x80 0xAA;"
#define _5 "BYTE 0x80 0xAB;"
#define _6 "BYTE 0x80 0xAC;"
#define _7 "BYTE 0x80 0xAD;"
#define _8 "BYTE 0x80 0xAE;"
#define _9 "BYTE 0x80 0xAF;"

// uppercase
#define _A "BYTE 0x80 0xB0;"
#define _B "BYTE 0x80 0xB1;"
#define _C "BYTE 0x80 0xB2;"
#define _D "BYTE 0x80 0xB3;"
#define _E "BYTE 0x80 0xB4;"
#define _F "BYTE 0x80 0xB5;"
#define _G "BYTE 0x80 0xB6;"
#define _H "BYTE 0x80 0xB7;"
#define _I "BYTE 0x80 0xB8;"
#define _J "BYTE 0x80 0xB9;"
#define _K "BYTE 0x80 0xBA;"
#define _L "BYTE 0x80 0xBB;"
#define _M "BYTE 0x80 0xBC;"
#define _N "BYTE 0x80 0xBD;"
#define _O "BYTE 0x80 0xBE;"
#define _P "BYTE 0x80 0xBF;"
#define _Q "BYTE 0x80 0xC0;"
#define _R "BYTE 0x80 0xC1;"
#define _S "BYTE 0x80 0xC2;"
#define _T "BYTE 0x80 0xC3;"
#define _U "BYTE 0x80 0xC4;"
#define _V "BYTE 0x80 0xC5;"
#define _W "BYTE 0x80 0xC6;"
#define _X "BYTE 0x80 0xC7;"
#define _Y "BYTE 0x80 0xC8;"
#define _Z "BYTE 0x80 0xC9;"

// lowercase
#define _a "BYTE 0x80 0xCA;"
#define _b "BYTE 0x80 0xCB;"
#define _c "BYTE 0x80 0xCC;"
#define _d "BYTE 0x80 0xCD;"
#define _e "BYTE 0x80 0xCE;"
#define _f "BYTE 0x80 0xCF;"
#define _g "BYTE 0x80 0xD0;"
#define _h "BYTE 0x80 0xD1;"
#define _i "BYTE 0x80 0xD2;"
#define _j "BYTE 0x80 0xD3;"
#define _k "BYTE 0x80 0xD4;"
#define _l "BYTE 0x80 0xD5;"
#define _m "BYTE 0x80 0xD6;"
#define _n "BYTE 0x80 0xD7;"
#define _o "BYTE 0x80 0xD8;"
#define _p "BYTE 0x80 0xD9;"
#define _q "BYTE 0x80 0xDA;"
#define _r "BYTE 0x80 0xDB;"
#define _s "BYTE 0x80 0xDC;"
#define _t "BYTE 0x80 0xDD;"
#define _u "BYTE 0x80 0xDE;"
#define _v "BYTE 0x80 0xDF;"
#define _w "BYTE 0x80 0xE0;"
#define _x "BYTE 0x80 0xE1;"
#define _y "BYTE 0x80 0xE2;"
#define _z "BYTE 0x80 0xE3;"

// .
#define _period "BYTE 0x80 0xE4;"

// ...
#define _ellipsis "BYTE 0x80 0xE9;"

// ?
#define _questionmark "BYTE 0x80 0xEA;"
#define _question "BYTE 0x80 0xEA;"
#define _qmark "BYTE 0x80 0xEA;"
#define _qm "BYTE 0x80 0xEA;"

// !
#define _exclamationmark "BYTE 0x80 0xEB;"
#define _exclamation "BYTE 0x80 0xEB;"
#define _emark "BYTE 0x80 0xEB;"
#define _em "BYTE 0x80 0xEB;"

// ,
#define _comma "BYTE 0x80 0xEC;"

// ·
#define _interpunct "BYTE 0x80 0xED;"
#define _ipunct "BYTE 0x80 0xED;"
#define _interpoint "BYTE 0x80 0xED;"
#define _ipoint "BYTE 0x80 0xED;"
#define _ip "BYTE 0x80 0xED;"
#define _middledot "BYTE 0x80 0xED;"
#define _middot "BYTE 0x80 0xED;"
#define _mdot "BYTE 0x80 0xED;"
#define _md "BYTE 0x80 0xED;"
#define _centereddot "BYTE 0x80 0xED;"
#define _centreddot "BYTE 0x80 0xED;"
#define _cdot "BYTE 0x80 0xED;"
#define _cd "BYTE 0x80 0xED;"

// :
#define _colon "BYTE 0x80 0xEE;"

// _
#define _underscore "BYTE 0x80 0xEF;"
#define _uscore "BYTE 0x80 0xEF;"
#define _us "BYTE 0x80 0xEF;"
#define _underline "BYTE 0x80 0xEF;"
#define _uline "BYTE 0x80 0xEF;"
#define _ul "BYTE 0x80 0xEF;"
#define _lowline "BYTE 0x80 0xEF;"
#define _lline "BYTE 0x80 0xEF;"
#define _ll "BYTE 0x80 0xEF;"
#define _lowdash "BYTE 0x80 0xEF;"
#define _lash "BYTE 0x80 0xEF;"
#define _ld "BYTE 0x80 0xEF;"

// 々 BYTE 0x80 0xF0

// /
#define _slash "BYTE 0x80 0xF1;"
#define _solidus "BYTE 0x80 0xF1;"
#define _stroke "BYTE 0x80 0xF1;"

// ~
#define _tilde "BYTE 0x80 0xF2;"
#define _virgulilla "BYTE 0x80 0xF2;"

// ‘
#define _leftsinglequotation "BYTE 0x80 0xF3;"

// ’
#define _rightsinglequotation "BYTE 0x80 0xF4;"

// “
#define _leftdoublequotation "BYTE 0x80 0xF5;"
#define _leftquotation "BYTE 0x80 0xF5;"
	
// ”
#define _rightdoublequotation "BYTE 0x80 0xF6;"
#define _rightquotation "BYTE 0x80 0xF6;"

// (
#define _leftparenthesis "BYTE 0x80 0xF7;"
#define _openparenthesis "BYTE 0x80 0xF7;"

// )
#define _rightparenthesis "BYTE 0x80 0xF8;"
#define _closeparenthesis "BYTE 0x80 0xF8;"

// { BYTE 0x80 0xF9

// } BYTE 0x80 0xFA

// +
#define _plus "BYTE 0x80 0xFD;"

// -
#define _minus "BYTE 0x80 0xFE;"

// ±
#define _plusminus "BYTE 0x80 0xFF;"

// ×
#define _multiplication "BYTE 0x81 0x00;"

// =
#define _equals "BYTE 0x81 0x01;"

// <
#define _lessthan "BYTE 0x81 0x02;"
#define _less "BYTE 0x81 0x02;"

// >
#define _greaterthan "BYTE 0x81 0x03;"
#define _greater "BYTE 0x81 0x03;"
#define _morethan "BYTE 0x81 0x03;"
#define _more "BYTE 0x81 0x03;"

// ∞
#define _infinity "BYTE 0x81 0x04;"
#define _lemniscate "BYTE 0x81 0x04;"
#define _infinite "BYTE 0x81 0x04;"

// ♂
#define _mars "BYTE 0x81 0x05;"
#define _male "BYTE 0x81 0x05;"

// ♀
#define _venus "BYTE 0x81 0x06;"
#define _female "BYTE 0x81 0x06;"

// %
#define _percent "BYTE 0x81 0x07;"

// &
#define _ampersand "BYTE 0x81 0x08;"
#define _and "BYTE 0x81 0x08;"

// *
#define _asterisk "BYTE 0x81 0x09;"

// ※ 0x810A

// ─
#define _dash "BYTE 0x81 0x0B;"

// │ 0x810C

// ▲
#define _uparrow "BYTE 0x81 0x0D;"

// ▼
#define _downarrow "BYTE 0x81 0x0E;"

// <-
#define _leftarrow "BYTE 0x81 0x0F;"

// ->
#define _rightarrow "BYTE 0x81 0x10;"

// ○
#define _circle "BYTE 0x81 0x11;"

// △
#define _triangle "BYTE 0x81 0x12;"

// □
#define _square "BYTE 0x81 0x13;"

// ■
#define _solidsquare "BYTE 0x81 0x14;"

// ♪
#define _eighthnote "BYTE 0x81 0x15;"
#define _note "BYTE 0x81 0x15;"

// ;
#define _semicolon "BYTE 0x81 0x16;"

// ◎ BYTE 0x81 0x17

//from here until the end of the list everything is fixed width

//0
#define _0full "BYTE 0x81 0x18;"

//1
#define _1full "BYTE 0x81 0x19;"

//2
#define _2full "BYTE 0x81 0x1A;"

//3
#define _3full "BYTE 0x81 0x1B;"

//4
#define _4full "BYTE 0x81 0x1C;"

//5
#define _5full "BYTE 0x81 0x1D;"

//6
#define _6full "BYTE 0x81 0x1E;"

//7
#define _7full "BYTE 0x81 0x1F;"

//8
#define _8full "BYTE 0x81 0x20;"

//9
#define _9full "BYTE 0x81 0x21;"

//－
#define _dashfull "BYTE 0x81 0x22;"

// after this there's like 3000 kanjis
